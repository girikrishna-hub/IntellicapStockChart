import streamlit as st
import openai
import os
import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta
import requests
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import smtplib
import json

# the newest OpenAI model is "gpt-5" which was released August 7, 2025.
# do not change this unless explicitly requested by the user
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

class WeeklyEmailGenerator:
    """Generate comprehensive weekly market analysis emails"""
    
    def __init__(self):
        self.week_start = datetime.now()
        self.week_end = self.week_start + timedelta(days=7)
        
    def generate_week_ahead_section(self):
        """Generate Week Ahead section with earnings and economic events"""
        try:
            # Get upcoming earnings (next 7 days)
            earnings_data = self._get_upcoming_earnings()
            
            # Get economic events (simplified - can be enhanced)
            economic_events = self._get_economic_events()
            
            week_ahead_html = f"""
            <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h2 style="color: #2c3e50; margin-bottom: 15px;">üìÖ Week Ahead</h2>
                
                <h3 style="color: #34495e;">üè¢ Major Earnings This Week</h3>
                <ul style="color: #2c3e50;">
                    {earnings_data}
                </ul>
                
                <h3 style="color: #34495e;">üìä Key Economic Events</h3>
                <ul style="color: #2c3e50;">
                    {economic_events}
                </ul>
            </div>
            """
            
            return week_ahead_html
            
        except Exception as e:
            return f"<p>Error generating Week Ahead section: {str(e)}</p>"
    
    def generate_ai_market_insights(self):
        """Generate AI-powered market insights using OpenAI"""
        try:
            # Get recent market data for context
            market_context = self._get_market_context()
            
            prompt = f"""
            As a financial market analyst, provide a comprehensive weekly market analysis based on this data:
            
            {market_context}
            
            Please provide insights on:
            1. Overall market sentiment and trends
            2. Key sectors to watch
            3. Risk factors for the coming week
            4. Technical analysis observations
            5. Investment themes and opportunities
            
            Keep the analysis professional but accessible, around 200-300 words.
            """
            
            response = openai_client.chat.completions.create(
                model="gpt-5",
                messages=[
                    {"role": "system", "content": "You are an expert financial analyst providing weekly market insights."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=400
            )
            
            ai_insights = response.choices[0].message.content
            
            ai_insights_html = f"""
            <div style="background: #e8f4f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h2 style="color: #2c3e50; margin-bottom: 15px;">üß† AI Market Insights</h2>
                <div style="color: #2c3e50; line-height: 1.6;">
                    {ai_insights.replace(chr(10), '<br>')}
                </div>
                <p style="font-size: 12px; color: #7f8c8d; margin-top: 15px;">
                    <em>Analysis generated by OpenAI GPT-5 based on current market data</em>
                </p>
            </div>
            """
            
            return ai_insights_html
            
        except Exception as e:
            return f"<p>Error generating AI Market Insights: {str(e)}</p>"
    
    def generate_action_items(self):
        """Generate actionable investment recommendations"""
        try:
            # Get stock screening data for recommendations
            action_items_data = self._get_action_items_data()
            
            # Use AI to generate personalized action items
            prompt = f"""
            Based on current market conditions and this stock data:
            {action_items_data}
            
            Provide 4-5 specific, actionable investment recommendations for this week:
            1. Stocks to research or consider
            2. Sectors showing strength/weakness
            3. Technical levels to watch
            4. Risk management suggestions
            5. Timing considerations
            
            Keep each item concise and specific with clear rationale.
            """
            
            response = openai_client.chat.completions.create(
                model="gpt-5",
                messages=[
                    {"role": "system", "content": "You are a financial advisor providing specific, actionable investment recommendations."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300
            )
            
            action_items = response.choices[0].message.content
            
            action_items_html = f"""
            <div style="background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <h2 style="color: #2c3e50; margin-bottom: 15px;">üéØ Action Items</h2>
                <div style="color: #2c3e50; line-height: 1.6;">
                    {action_items.replace(chr(10), '<br>')}
                </div>
                <p style="font-size: 12px; color: #7f8c8d; margin-top: 15px;">
                    <em>Recommendations are for informational purposes only and not financial advice</em>
                </p>
            </div>
            """
            
            return action_items_html
            
        except Exception as e:
            return f"<p>Error generating Action Items: {str(e)}</p>"
    
    def _get_upcoming_earnings(self):
        """Get upcoming earnings for major stocks"""
        try:
            # Sample major stocks - can be expanded
            major_stocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META', 'TSLA', 'NVDA']
            earnings_list = []
            
            for symbol in major_stocks[:5]:  # Limit to prevent API overload
                try:
                    ticker = yf.Ticker(symbol)
                    calendar = ticker.calendar
                    if calendar is not None and not calendar.empty:
                        # Check if earnings are in the next 7 days
                        earnings_date = calendar.index[0] if len(calendar.index) > 0 else None
                        if earnings_date:
                            date_str = earnings_date.strftime("%A, %B %d")
                            earnings_list.append(f"<li><strong>{symbol}</strong> - {date_str}</li>")
                except:
                    continue
            
            if not earnings_list:
                earnings_list = [
                    "<li>No major earnings scheduled this week</li>",
                    "<li>Check individual stock calendars for specific dates</li>"
                ]
            
            return "".join(earnings_list)
            
        except Exception as e:
            return f"<li>Error loading earnings data: {str(e)}</li>"
    
    def _get_economic_events(self):
        """Get key economic events for the week"""
        # Simplified economic calendar - can be enhanced with real API
        events = [
            "<li><strong>Federal Reserve</strong> - Monitor for policy updates</li>",
            "<li><strong>Employment Data</strong> - Weekly jobless claims (Thursday)</li>",
            "<li><strong>Inflation Indicators</strong> - CPI/PPI releases if scheduled</li>",
            "<li><strong>International Markets</strong> - Central bank meetings and data</li>",
            "<li><strong>Sector Rotation</strong> - Watch for institutional flows</li>"
        ]
        return "".join(events)
    
    def _get_market_context(self):
        """Get current market data for AI analysis"""
        try:
            # Get major index data
            indices = ['^GSPC', '^IXIC', '^DJI']  # S&P 500, NASDAQ, Dow
            market_data = {}
            
            for index in indices:
                ticker = yf.Ticker(index)
                hist = ticker.history(period="5d")
                if not hist.empty:
                    current_price = hist['Close'].iloc[-1]
                    prev_price = hist['Close'].iloc[-2] if len(hist) > 1 else current_price
                    change_pct = ((current_price - prev_price) / prev_price) * 100
                    market_data[index] = {
                        'price': current_price,
                        'change_pct': change_pct
                    }
            
            context = f"""
            Market Data Summary:
            S&P 500: {market_data.get('^GSPC', {}).get('change_pct', 0):.2f}% change
            NASDAQ: {market_data.get('^IXIC', {}).get('change_pct', 0):.2f}% change
            Dow Jones: {market_data.get('^DJI', {}).get('change_pct', 0):.2f}% change
            Analysis Date: {datetime.now().strftime('%Y-%m-%d')}
            """
            
            return context
            
        except Exception as e:
            return f"Error getting market context: {str(e)}"
    
    def _get_action_items_data(self):
        """Get data for generating action items"""
        try:
            # Get some sample market data for recommendations
            sample_stocks = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA']
            stock_data = []
            
            for symbol in sample_stocks:
                try:
                    ticker = yf.Ticker(symbol)
                    info = ticker.info
                    hist = ticker.history(period="1mo")
                    
                    if not hist.empty and info:
                        current_price = hist['Close'].iloc[-1]
                        month_ago_price = hist['Close'].iloc[0]
                        month_change = ((current_price - month_ago_price) / month_ago_price) * 100
                        
                        stock_data.append(f"{symbol}: {month_change:.1f}% monthly change")
                except:
                    continue
            
            return "Stock Performance Summary: " + ", ".join(stock_data)
            
        except Exception as e:
            return f"Error getting action items data: {str(e)}"
    
    def generate_complete_email(self):
        """Generate the complete weekly email HTML"""
        try:
            # Generate all sections
            week_ahead = self.generate_week_ahead_section()
            ai_insights = self.generate_ai_market_insights()
            action_items = self.generate_action_items()
            
            # Create complete email template
            email_html = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <title>Weekly Market Analysis</title>
                <style>
                    body {{ font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }}
                    .header {{ background: #2c3e50; color: white; padding: 20px; text-align: center; border-radius: 8px; }}
                    .footer {{ background: #ecf0f1; padding: 15px; text-align: center; margin-top: 30px; border-radius: 8px; }}
                </style>
            </head>
            <body>
                <div class="header">
                    <h1>üìä Weekly Market Analysis</h1>
                    <p>Week of {datetime.now().strftime('%B %d, %Y')}</p>
                </div>
                
                {week_ahead}
                {ai_insights}
                {action_items}
                
                <div class="footer">
                    <p>Generated by Yahoo Finance Analysis Platform</p>
                    <p style="font-size: 12px; color: #7f8c8d;">
                        This analysis is for informational purposes only and does not constitute financial advice.
                    </p>
                </div>
            </body>
            </html>
            """
            
            return email_html
            
        except Exception as e:
            return f"<html><body><h1>Error generating email: {str(e)}</h1></body></html>"

def weekly_email_tab():
    """Weekly Email tab interface"""
    st.markdown("### üìß Weekly Market Analysis Email")
    st.markdown("Generate and preview your weekly market analysis email with AI insights and actionable recommendations.")
    st.markdown("---")
    
    # Email generator interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("#### üìã Email Content Preview")
        
        if st.button("üöÄ Generate Weekly Email", type="primary"):
            with st.spinner("Generating your weekly market analysis..."):
                email_generator = WeeklyEmailGenerator()
                
                # Generate email content
                email_html = email_generator.generate_complete_email()
                
                # Display preview
                st.markdown("#### üìß Email Preview")
                st.components.v1.html(email_html, height=800, scrolling=True)
                
                # Store in session state for sending
                st.session_state.generated_email = email_html
                
                st.success("‚úÖ Weekly email generated successfully!")
    
    with col2:
        st.markdown("#### ‚öôÔ∏è Email Settings")
        
        # Email configuration
        user_email = st.text_input("üìß Your Email", placeholder="your.email@example.com")
        
        st.markdown("**üìÖ Content Sections:**")
        st.info("""
        ‚úÖ **Week Ahead**
        - Upcoming earnings
        - Economic events
        
        ‚úÖ **AI Market Insights**
        - Market sentiment analysis
        - Sector recommendations
        
        ‚úÖ **Action Items**
        - Specific stock recommendations
        - Risk management tips
        """)
        
        # Send email functionality (placeholder)
        if st.button("üì§ Send Email"):
            if user_email and 'generated_email' in st.session_state:
                st.info("üìß Email sending functionality will be implemented with SMTP integration")
                st.markdown("**Email would be sent to:** " + user_email)
            else:
                st.warning("‚ö†Ô∏è Please generate email content first and enter your email address")
        
        st.markdown("---")
        st.markdown("#### üîÑ Automation Options")
        st.info("""
        **Coming Soon:**
        - Weekly auto-delivery
        - Custom timing
        - Subscription management
        """)

if __name__ == "__main__":
    weekly_email_tab()